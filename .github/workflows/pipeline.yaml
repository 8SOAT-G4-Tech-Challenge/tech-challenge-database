name: CI - AWS RDS / Elastic Cache

on:
  workflow_dispatch:
    inputs:
      deployType:
        description: 'Deploy type'
        type: choice
        options:
          - deploy
          - destroy
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  infrastructure:
    name: 'Run Terraform'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deployType == 'deploy' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: tf_fmt
        run: terraform fmt -check
        working-directory: ./iac
        continue-on-error: true

      - name: Check if S3 bucket exists
        id: s3_check
        run: |
          if aws s3 ls "s3://${{vars.BUCKET_NAME }}" 2>&1 | grep -q 'NoSuchBucket'
          then
            echo "Bucket does not exist"
            echo "continue=false" >> $GITHUB_ENV
          else
            echo "Bucket exists"
            echo "continue=true" >> $GITHUB_ENV
          fi

      - name: Terraform init S3 Butcket State
        if: env.continue == 'false'
        working-directory: ./iac/s3-bucket-state
        run: terraform init

      - name: Terraform Validate S3
        if: env.continue == 'false'
        working-directory: ./iac/s3-bucket-state
        run: terraform validate

      - name: Terraform Plan S3
        if: env.continue == 'false'
        working-directory: ./iac/s3-bucket-state
        id: terraform-plan-s3
        run: terraform plan

      - name: Terraform Apply S3
        if: env.continue == 'false'
        working-directory: ./iac/s3-bucket-state
        id: terraform-apply-s3
        run: terraform apply -auto-approve

      - name: Terraform Init
        id: tf_init
        run: terraform init
        working-directory: ./iac

      - name: Terraform Validate
        id: tf_validate
        run: terraform validate
        working-directory: ./iac

      - name: Terraform Plan
        id: tf_plan
        run: terraform plan -var="tc_order_db_postgres_database=${{ vars.TC_ORDER_DB_POSTGRES_DATABASE }}" -var="tc_order_db_postgres_username=${{ vars.TC_ORDER_DB_POSTGRES_USERNAME }}" -var="tc_order_db_postgres_password=${{ secrets.TC_ORDER_DB_POSTGRES_PASSWORD }}" -var="tc_user_db_postgres_database=${{ vars.TC_USER_DB_POSTGRES_DATABASE }}" -var="tc_user_db_postgres_username=${{ vars.TC_USER_DB_POSTGRES_USERNAME }}"   -var="tc_user_db_postgres_password=${{ secrets.TC_USER_DB_POSTGRES_PASSWORD }}" -var="tc_payment_atlas_org_id=${{ secrets.TC_PAYMENT_ATLAS_ORG_ID }}" -var="tc_payment_atlas_project_name=${{ vars.TC_PAYMENT_ATLAS_PROJECT_NAME }}" -var="tc_payment_atlas_ip_address=${{ vars.TC_PAYMENT_ATLAS_IP_ADDRESS }}" -var="tc_payment_db_mongo_username=${{ vars.TC_PAYMENT_DB_MONGO_USERNAME }}"
        working-directory: ./iac
        continue-on-error: true

      - name: Terraform Apply
        id: tf_apply
        run: terraform apply -auto-approve -var="tc_order_db_postgres_database=${{ vars.TC_ORDER_DB_POSTGRES_DATABASE }}" -var="tc_order_db_postgres_username=${{ vars.TC_ORDER_DB_POSTGRES_USERNAME }}" -var="tc_order_db_postgres_password=${{ secrets.TC_ORDER_DB_POSTGRES_PASSWORD }}" -var="tc_user_db_postgres_database=${{ vars.TC_USER_DB_POSTGRES_DATABASE }}" -var="tc_user_db_postgres_username=${{ vars.TC_USER_DB_POSTGRES_USERNAME }}"   -var="tc_user_db_postgres_password=${{ secrets.TC_USER_DB_POSTGRES_PASSWORD }}" -var="tc_payment_atlas_org_id=${{ secrets.TC_PAYMENT_ATLAS_ORG_ID }}" -var="tc_payment_atlas_project_name=${{ vars.TC_PAYMENT_ATLAS_PROJECT_NAME }}" -var="tc_payment_atlas_ip_address=${{ vars.TC_PAYMENT_ATLAS_IP_ADDRESS }}" -var="tc_payment_db_mongo_username=${{ vars.TC_PAYMENT_DB_MONGO_USERNAME }}"
        working-directory: ./iac

  migrations:
    name: 'Run Migrations'
    runs-on: ubuntu-latest
    needs: infrastructure
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deployType == 'deploy' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get tech-challenge-order RDS Endpoint from SSM
        run: |
          echo "AWS_ORDER_RDS_URI=$(aws secretsmanager get-secret-value --secret-id tech-challenge-order-aws-rds-endpoint --query 'SecretString' --output text --region us-east-1)" >> $GITHUB_ENV

      - name: Get tech-challenge-user RDS Endpoint from SSM
        run: |
          echo "AWS_USER_RDS_URI=$(aws secretsmanager get-secret-value --secret-id tech-challenge-user-aws-rds-endpoint --query 'SecretString' --output text --region us-east-1)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run migrations tech-challenge-order
        env:
          DATABASE_URL: '${{ env.AWS_ORDER_RDS_URI }}'
        working-directory: ./iac/modules/tech-challenge-order
        run: npx prisma migrate deploy

      - name: Run migrations tech-challenge-user
        env:
          DATABASE_URL: '${{ env.AWS_USER_RDS_URI }}'
        working-directory: ./iac/modules/tech-challenge-user
        run: npx prisma migrate deploy

  terraform_destroy:
    name: 'Run Terraform destroy'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deployType == 'destroy' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.1.7'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform init Database
        run: terraform init

      - name: Terraform destroy Database
        run: |
          terraform destroy -auto-approve -var="tc_order_db_postgres_database=${{ vars.TC_ORDER_DB_POSTGRES_DATABASE }}" -var="tc_order_db_postgres_username=${{ vars.TC_ORDER_DB_POSTGRES_USERNAME }}" -var="tc_order_db_postgres_password=${{ secrets.TC_ORDER_DB_POSTGRES_PASSWORD }}" -var="tc_user_db_postgres_database=${{ vars.TC_USER_DB_POSTGRES_DATABASE }}" -var="tc_user_db_postgres_username=${{ vars.TC_USER_DB_POSTGRES_USERNAME }}"   -var="tc_user_db_postgres_password=${{ secrets.TC_USER_DB_POSTGRES_PASSWORD }}" -var="tc_payment_atlas_org_id=${{ secrets.TC_PAYMENT_ATLAS_ORG_ID }}" -var="tc_payment_atlas_project_name=${{ vars.TC_PAYMENT_ATLAS_PROJECT_NAME }}" -var="tc_payment_atlas_ip_address=${{ vars.TC_PAYMENT_ATLAS_IP_ADDRESS }}" -var="tc_payment_db_mongo_username=${{ vars.TC_PAYMENT_DB_MONGO_USERNAME }}"

      - name: Check if S3 bucket exists
        id: s3_check
        run: |
          if aws s3 ls "s3://${{vars.BUCKET_NAME }}" 2>&1 | grep -q 'NoSuchBucket'
          then
            echo "Bucket does not exist"
            echo "continue=false" >> $GITHUB_ENV
          else
            echo "Bucket exists"
            echo "continue=true" >> $GITHUB_ENV
          fi

      - name: Terraform init S3 Butcket State
        if: env.continue == 'false'
        working-directory: ./iac/s3-bucket-state
        run: terraform init

      - name: Terraform Validate S3
        if: env.continue == 'false'
        working-directory: ./iac/s3-bucket-state
        run: terraform validate

      - name: Terraform Plan S3
        if: env.continue == 'false'
        working-directory: ./iac/s3-bucket-state
        id: terraform-plan-s3
        run: terraform plan
