// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
	binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProductCategory {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255) @unique
  createdAt DateTime @default(now()) @map("created_at")
	updatedAt DateTime @updatedAt @map("updated_at")

  products  Product[]

  @@map("product_category")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String   @db.VarChar(255)
  url       String   @db.VarChar(255) @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_image")
}

model Product {
  id          String          @id @default(uuid())
  categoryId  String          @db.VarChar(255)
  name        String          @db.VarChar(255)
  description String          @db.Text
  value       Decimal         @db.Money
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  category    ProductCategory @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  orderItems  OrderItem[]

  @@map("product")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String   @db.VarChar(255)
  productId String   @db.VarChar(255)
  quantity  Int
  value     Decimal  @db.Money
  details   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

	// Remover a restrição de unicidade dos campos orderId e productId
  @@unique([orderId, productId]) // Adiciona uma restrição única combinada

  @@map("order_item")
}

enum OrderStatus {
  created
  received
	preparation
	ready
	finished
	canceled
}

model Order {
  id         String   @id @default(uuid())
  readableId    String?  @db.VarChar(255)
  customerId String?  @db.VarChar(255)
  status     OrderStatus   @default(created)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  items      OrderItem[]

  @@map("order")
}


